\documentclass[12pt]{article}
\usepackage{amsmath,pstricks,fullpage}
\usepackage[authoryear,round]{natbib}
\usepackage{hyperref}
\usepackage{theorem}
\usepackage{float}
\usepackage{ifthen}

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\newcommand{\R}{{\textsf{R}}}
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\term}[1]{{\emph{#1}}}
\newcommand{\Rpackage}[1]{\textsf{#1}}
\newcommand{\Rfunction}[1]{\texttt{#1}}
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Rfunarg}[1]{{\textit{#1}}}


\begin{document}

\SweaveOpts{keep.source=TRUE}

%\VignetteDepends{YEAST,GO,annotate,gaschYHS,harbChIP)}
%\VignetteIndexEntry{GO scoring using various methods}
%\VignetteKeywords{yeast, gene sets based analysis, gene ontology}

\title{Introduction to R}

\author{Stefan Bekiranov\\CS 6014}
\maketitle

\tableofcontents

\section{Introduction}

In this lab, we will be exploring how to use R.  We will work on generating and accessing elements/components from R objects including vectors, matrices, lists, factors, data frames and functions (both built in and user defined).  We will also explore R's basic graphics utilities including \code{plot}, \code{hist}, and \code{boxplot}.  Finally, we'll introduce you to R's control structures: \code{if}-\code{else}, \code{for} and \code{while} loops.  Have fun!
  
\section{Vectors}

Create a numerical vector of all the integers from 11 to 20 named \code{num} using the sequence generating operator \code{:}.  Use this vector to generate 6 logical vectors named \code{lg1}...\code{lg6} by applying conditions using comparison operators \code{>}, \code{>=}, \code{<}, \code{<=}, \code{==} and \code{!=}.  Generate a character vector named \code{char} using the concatenate function \code{c(...)}.  Use this vector to create 2 logical vectors, \code{lg7} and \code{lg8}, using the comparison operators \code{==} and \code{!=}.  View the elements of all these vectors by typing their names and hitting ``enter'' on your keyboard.  Create a mixed vector named \code{mix1} that contains values with a decimal point and integers using the \code{c(...)} function.  What type of vector is produced?  Check by typing \code{mix1} and hitting ``enter'' on your keyboard as well as using the \code{mode(...)} function.  Create a mixed vector named \code{mix2} that contains values with a decimal point, integers and characters with the \code{c(...)} function.  What type of vector is produced?  Again, check by typing \code{mix2} and hitting ``enter'' on your keyboard as well as using the \code{mode} function.    

Extract a subset of elements from \code{num} using the \code{:} operator, \code{c(...)} as well as all 6 of the logical vectors \code{lg1}...\code{lg6}.  Extract the elements of \code{char} by using \code{lg7} and \code{lg8}.  Extract subsets of \code{mix1} and \code{mix2} using negative indexes together with the \code{:} operator and the \code{c(...)} function.

Perform the following mathematical operations on \code{num}: \code{num/num}, \code{num*num}, \code{num**2}, \code{num + num}, \code{2*num} and \code{num - num}.  Are these standard matrix operations?          

%\newpage

<<vector>>=
num = 11:20
num # components of num
lg1 = num > 15
lg1 # components of lg1
lg2 = num < 12
lg3 = num >= 16
lg4 = num <= 10
lg5 = num == 20
lg6 = num != 11
char = c("R", "Perl", "stats", "bioconductor", "ChIP-Seq")
lg7 = char == "R"
lg8 = char != "Perl"
mix1 = c(1, 2, 3.3)
mix1 # doubles
mode(mix1)
mix2 = c(1, 2, 3.3, "R") 
mix2 # character
mode(mix2)
num[2:6]
num[c(1,3,5)]
num[lg1]
num[lg2]
num[lg3]
num[lg4]
num[lg5]
num[lg6]
char[lg7]
char[lg8]
mix1[-(3:4)]
mix2[-c(3,4)]
num/num
num*num
num**2
num+num
2*num
num-num
@
 

\section{Matrices}

Create a 5 column matrix named \code{mat} from \code{num} using the \code{matrix()} function and filling in the values by row first.  What are the dimensions of \code{mat}?  Type \code{mat} at the prompt then ``enter'' and use the \code{dim()} function to find out.  Extract the element in the second row and third column of \code{mat}.  Extract the full first row and, separately, the full fourth column of \code{mat}.  Extract all rows and the 4th and 5th columns of \code{mat} using the \code{:} operator and \code{c()} command.   Create a logical vector \code{lg9} by checking to see which elements in the first row of \code{mat} are \code{<=} 14.  Apply \code{lg9} to the columns of \code{mat}.  Perform the following mathematical operations on \code{mat}: \code{mat/mat}, \code{mat*mat}, \code{mat**2}, \code{mat + mat}, \code{2*mat} and \code{mat - mat}.      

<<matrix>>=
mat = matrix(num, ncol=5, byrow=T)
mat
dim(mat)
mat[2,3]
mat[1,]
mat[,4]
mat[,4:5]
mat[,c(4,5)]
lg9 = mat[1,] <= 14
lg9
mat[,lg9]
mat/mat
mat*mat
mat**2
mat + mat
2*mat
mat-mat
@

\section{Lists and Data Frames}

Generate a list named \code{ExpList} with three components: ExpLevel (3 numeric elements), Exp (3 logical elements with at least one \code{TRUE}) and GeneName (3 character elements).  Type \code{ExpList} and hit ``enter''.  Extract the GeneName component using the \code{\$} operator, double brackets,\code{[[]]}, and single brackets, \code{[]}, after \code{ExpList}.  Do you notice any differences in the outputs?  Extract the third element of the GeneName component.  Extract the ExpLevel and GeneName components in one view using single brackets after \code{ExpList}, \code{[]}.  Generate a character vector of length 3 named \code{ids}.  Type \code{help(as.data.frame)}.  Read the help page.  Apply the function \code{as.data.frame} on the list \code{ExpList} to generate a data frame named \code{ExpData} with row names \code{ids} (setting \code{stringsAsFactors=F}).  Type \code{ExpData} and hit ``enter''. Extract the first row and then the third column (two separate operations) of \code{ExpData} using indexes.  Use the \code{\$} operator to extract the Exp column.  Extract the rows that are \code{TRUE} in the \code{Exp} column.  Check the attributes of \code{ExpData} by applying the \code{dim()} and \code{mode()} functions.

<<lists>>=
ExpList = list(ExpLevel=c(1,2,3), Exp=c(F,T,T), GeneName=c("p53", "cMyc", "Sp1"))
ExpList
ExpList$GeneName
ExpList[[2]]
ExpList[2]
ExpList$GeneName[3]
ExpList[c(1,3)]
ids = c("id1", "id2", "id3")
ExpData = as.data.frame(ExpList, row.names=ids, stringsAsFactors=F)
ExpData
ExpData[1,]
ExpData[,3]
ExpData$Exp
ExpData[ExpData$Exp,]
dim(ExpData)
mode(ExpData)
@                     

\section{Reading and Writing Data}

Now we're going to learn to read and write data into and out of R respectively.  We're going to start by writing so that we have files to read in.  First, we're going to write the matrix \code{mat} to a file named ``mat.txt''.  We'll use the \code{write()} function which writes a vector or matrix to a file.  Type \code{help(write)}.  You'll see that \code{write} requires you to transpose your matrix (i.e., switch rows and columns).  So try the following:

<<write>>=   
t(mat) #transpose mat matrix
write(t(mat), file="matrix.txt", ncol=5, sep="\t")
@

Check to see if the file ``matrix.txt'' is in the same directory in which you called R by typing \code{system("ls")}.  If it is, view its contents using the command \code{system("less matrix.txt")}.  Was it written correctly?  What if we had omitted the \code{t()} function?  Try it.

Next, we'll write our data frame ExpData to a file named ``ExpData.txt'' using the \code{write.table()} function:

<<writetable>>=
write.table(ExpData,file="ExpData.txt",quote=F,sep="\t",row.names=T,col.names=T)
@

Let's use \code{system("ls")} to see if the file was written and \code{system("less ExpData.txt")} to view the contents.  Is the output what you expected?  Note, I normally don't include row names in my output files (i.e., I set \code{row.names=F}).

Now we'll try to read in our matrix \code{mat} and data frame \code{ExpData}.  There are two major function that allow you to read text files into R: \code{scan()} which returns a vector and \code{read.table} which returns a data frame.  If we want to read our file ``matrix.txt'' in as a matrix using \code{scan} we also have to use the \code{matix} function.   

<<scan>>=
mat2 = scan("matrix.txt")
mat2 # This is a vector, not a matrix!
mat2 = matrix(scan("matrix.txt"), byrow=T, ncol=5)
mat2 # This is correct.
@ 

Now let's read our file ``ExpData.txt'' into a data frame called ExpData2 using \code{read.table}.

<<readtable>>=
ExpData2 = read.table("ExpData.txt", header=T, sep="\t")
ExpData2 # This is correct.
@

\section{Graphics}

Now we'll explore some of R's graphics functions.  The function \code{plot} is R's basic plotting function.  Type \code{help(plot)}.  If you look at all the parameters available to \code{plot} by typing help(par), you'll see that we could spend hours leaning all the details of \code{plot} alone.  Instead, I'll just take you through a few examples of generating a scatter plot and a line:

<<xy>>=
x = seq(0,1,by=0.01) # a vector of values from 0 to 1 in increments of 0.01.
y = x + rnorm(length(x), mean=0, sd=0.1) # add a little Gaussian noise to x.
@

<<plot, fig=TRUE>>=
plot(x,y,xlab="x",ylab="y",main="L",xlim=c(0,1),ylim=c(0,1),pch=18,col="red")
lines(x,x,col="blue")
@   

Redraw the above plot by using the \code{type="l"} option in \code{plot} and \code{points} command instead of \code{line} below plot.

<<plot2, fig=TRUE>>=
plot(x,y,type="l",xlab="x",ylab="y",main="L",xlim=c(0,1),ylim=c(0,1),col="red")
points(x,x,col="blue")
@

Make a plot with two lines and two sets of corresponding scatter points (similar to the first plot; use 4 colors): one with slope equal to one and another with slope equal to two using the \code{plot}, \code{seq}, \code{points}, \code{lines} and \code{rnorm} functions.

<<plot3, fig=TRUE>>=
z = 2*x + rnorm(length(x), mean=0, sd=0.5)
plot(x,y,main="2 Lines",xlim=c(0,1),ylim=c(0,1),pch=18,col="red")
points(x,z,pch=18,col="green")
lines(x,x,col="blue")
lines(x,2*x,col="purple")
@

Can we see all the ``green'' data points?  If not, how would get them all in the plot?  Try it.

Now let's generate a plot of the histogram (using the function \code{hist}), smoothed density (using the function \code{density} in \code{plot}) and boxplot (using the function \code{boxplot}) of a random vector \code{r} which is normally distributed with a mean of 2 and standard deviation of 1.  First we have to generate the random vector (using \code{rnorm}) and then the plots:

<<ran>>=
r = rnorm(1000,mean=2, sd=1)
@

<<hist, fig=TRUE>>=
hist(r, main="Hist of r")
@

<<density, fig=TRUE>>=
plot(density(r), "Density of r")
@

<<boxplot, fig=TRUE>>=
boxplot(r, main="Boxplot of r")
@ 

\section{Control Structures}

R's control structures are very similar to those of other programming languages.  We will return to our numerical vector \code{num} to illustrate the use of the \code{if} statement, \code{for} loop and \code{while} loop:

<<if>>=
if (length(num) > 2) {
long = TRUE
variance = var(num)
} else {
long = FALSE
variance = NA
}
long
variance
@

What does the chunk of code written above do?

<<for>>=
squareRoot = numeric()
for (i in 1:length(num)) {
squareRoot = c(squareRoot, sqrt(num[i]))
}
squareRoot
@

Why did I declare \code{squareRoot} as a numeric vector before the loop?  Remove the vector \code{squareRoot} by typing \code{rm(squareRoot)} and try the loop again without declaring the variable.  Did you get an error message?  What was the problem?  Could we have done this another, much simpler, way?

<<while>>=
i = 1
sumSqrt = 0
while (squareRoot[i] <= 4) {sumSqrt = sumSqrt + squareRoot[i]; i=i+1}
sumSqrt
@

What does the chunk of code written above do?  Why did I set the variable \code{i} before the \code{while} loop?

\section{Functions}

R's strength are the thousands of powerful functions that allow you to apply the latest computational statistics algorithms to your data.  In our case, the Bioconductor suite of tools is extremely powerful for array analysis and more.  So, take a little time and explore some of the basic functions that I listed on the ``R Functions and Packages'' slide of the ``Introduction to R'' lecture.  Use the \code{help} function to understand proper usage/input requirements and apply some of these basic functions to your R objects.  Next, read the ``Calling Conventions for Functions'' slide to get a feel for applying a t-test and then type \code{t.test} and read the help page.  Generate two vectors named \code{x} and \code{y} of length 10 whose elements are normally distributed with zero mean and standard deviation equal to one using the function \code{rnorm}.  Next, create a vector of length 10 named \code{z} with mean two and standard deviation one.  Apply a \code{t.test} between (1) \code{x} and \code{y} and (2) \code{x} and \code{z} using the ``greater'' \code{alternative} option.  Given what you know about how you created \code{x}, \code{y}, and \code{z}, order the vectors in \code{t.test} to yield the lowest possible p-value.  

<<ttest>>=
x = rnorm(10)
y = rnorm(10)
z = rnorm(10, mean=2)
t.test(x,y,alternative="greater") # ordering doesn't matter
t.test(z,y,alternative="greater") # correct ordering
t.test(y,z,alternative="greater") # incorrect ordering
@

We'll end with learning how to write our own functions.  We're going to write a function called \code{medmean} that calculates the median of a vector if its length is below a user defined value \code{n} and the \code{mean} otherwise.  We'll apply it to two vectors of different length which include a bad outlier.

<<func>>=
medmean = function(x, n) {if (length(x) > n) {mean(x)} else {median(x)}}
fewdata = c(rnorm(3),100)
manydata = c(rnorm(1000),100)
medmean(fewdata,10)    # case 1
medmean(fewdata,3)     # case 2
medmean(manydata,10)   # case 3   
medmean(manydata,1001) # case 4
@ 

For each of the four cases, which branch of the \code{if} statement did we execute?  Can you draw any conclusions about applying the mean or median to data with outliers?

We'll continue next with more R and Bioconductor.  Hope you had some fun learning R.  

\end{document}
